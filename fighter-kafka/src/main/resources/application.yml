server:
  port: 8080  #端口
spring:
  application:
    name: kafka-user  # 容器名
  kafka:
    # 设置批量消费
    #    listener:
    #      type: batch
    #        消费端监听的topic不存在时，项目启动会报错(关掉)
    #      monitor-interval: false
    bootstrap-servers: 192.168.59.128:9092 #代理地址
    producer:
      # 重试次数
      retries: 0
      # 每次批量发送消息的数量
      batch-size: 16384
      # 生产端缓冲区大小
      buffer-memory: 33554432
      # 指定消息key和消息体的编解码方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      acks: 1
      # 提交延时
      properties:
        linger:
          ms: 0
      # 自定义分区器
      # spring.kafka.producer.properties.partitioner.class=com.felix.kafka.producer.CustomizePartitioner
    consumer:
      # 默认的消费组ID
      group-id: user-log-group
      # 提交offset延时(接收到消息后多久提交offset)
      auto-commit-interval: 100
      # 当kafka中没有初始offset或offset超出范围时将自动重置offset
      # earliest:重置为分区中最小的offset;
      # latest:重置为分区中最新的offset(消费分区中新产生的数据);
      # none:只要有一个分区不存在已提交的offset,就抛出异常;
      auto-offset-reset: earliest
      # 是否自动提交offset
      enable-auto-commit: true
      # Kafka提供的序列化和反序列化类
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 提交offset延时(接收到消息后多久提交offset)
      properties:
        linger:
          ms: 100
      # 批量消费每次最多消费多少条消息
      max-poll-records: 50

